#!/bin/bash

# SVTGet v0.1.4
# Updates can be found at http://svtget.se/
# Support the project with Flattr: https://flattr.com/thing/300374/SVT-Get-a-local-cache-tool-for-SVT-Play
#
# Description: The script can download the RTMP streams available from the
# online streaming service "SVT Play", managed by Sveriges Television
#
# Original author: Mikael "MMN-o" Nordfeldth <mmn@hethane.se>
# Additional authors: sikevux, DomeDan, Erik Modén
# License: GPLv3
# http://www.gnu.org/licenses/gpl-3.0.txt
#
# URL: http://svtget.se/
# Flattr: http://flattr.com/thing/300374/SVT-Get-a-local-cache-tool-for-SVT-Play

# Changelog:
# -- v0.1.4
#    * Erik Modén Changed filename to use folderStructure and title from json data.
# -- v0.1.3
#    * Erik Modén updated script to work with the new svtplay that was launched 2012-06-04
# -- v0.1.2
#    * deb package removed (...maintenance...)
#    * DomeDan added Öppna Arkivet support
#    * DomeDan added subtitle download support
#    * script can now choose to play clips directly
# -- v0.1.1
#    * deb package created by sikevux, small fixes on other stuff
# -- v0.1
#    * Initial functionality. Normal links seem to be working.

# Sample usage:
# ./svtget http://svtplay.se/v/2440756/k_special/presspauseplay

if [ `uname` == "Darwin" ]; then
    SED=gsed
else
    SED=sed
fi

svtplay_url="http://www.svtplay.se"

# actions
play=0
subtitles=0

DEPENDENCIES="rtmpdump curl $SED cut bash"
PLAYERS="mplayer vlc"
for DEP in $DEPENDENCIES; do
	if [ -z "`which $DEP`" ]; then
		echo "ERROR: Missing dependency '$DEP'." >&2
		exit
	fi
done

# Available bitrates: 320 850 1400 2400
BITRATE=""
function set_bitrate {
	case $1 in
	l)	BITRATE=320	;;
	m)	BITRATE=850	;;
	n)	BITRATE=1400	;;
	h)	BITRATE=2400	;;
	320|850|1400|2400)
		BITRATE=$1	;;
	*)
		echo "Bad quality setting ($1), keeping setting '$BITRATE'"
		;;
	esac
}

function get_tcUrls {
	local html=$1
	local bitrate=$2
	expr "$bitrate" + 1 &> /dev/null
	if [ $? -gt 0 ] || [ -z "$bitrate" ] || [ "$bitrate" -eq 0 ]; then
		bitrate='[0-9]\+'
	fi
	#normal clip
	tcUrls=`echo $html | $SED 's/},{/}\n{/g' | sed "s/\(rtmp[e]\?:[^|&]*\)\",\"bitrate\":\($bitrate\)/\\n\2|\1\\n/g" | grep -E '^[[:digit:]]+\|' | sort -n | uniq`
	if [ -z "$tcUrls" ]; then
	 	#from öppet arkiv
		tcUrls=`echo $html | $SED "s/\(rtmp[e]\?:[^|&]*\)&amp;/\\n320|\1\\n/g" | grep -E '^[[:digit:]]+\|' | sort -n | uniq`
	fi
	if [ -z "$tcUrls" ]; then
		#flv-files
		tcUrls=$(echo $html | $SED 's/},{/}\n{/g' | sed "s/\(http[s]\?:[^\"]*\.flv\)\",\"bitrate\":\($bitrate\)/\\n\2|\1\\n/g" | grep -E '^[[:digit:]]+\|' | sort -n | uniq)
	fi
	echo $tcUrls
}

function get_sub {
	local html=$1
	echo $html | $SED -n 's/.*"subtitleReferences":\[{"url":"\([^"]\+\)".*/\1/p'
}

function pick_tcUrl {
	echo "#  Bitrate	Stream name" >&2
	let n=1
	for STREAM in $@; do
		local BITRATE=`echo $STREAM | cut -d '|' -f 1 -`
		Streams[$n]=`echo $STREAM | cut -d '|' -f 2 -`
		local NAME=`basename $STREAM`
		echo "$n. ${BITRATE} kbps	$NAME" >&2
		let n++
	done
	
	stream=0
	if [ "$#" -eq 1 ]; then
		stream=1
	fi
	while [ -z ${Streams[$stream]} ]; do
		echo -ne "\nWhich file do you want? [#] "
		read stream
		if [ -n "$stream" ] && [ "q" == "$stream" ]; then
			exit
		fi
	done
	tcUrl=${Streams[$stream]}
}

function askOverwrite {
    echo  "The file \"$1\" exists already!"
    while true; do
	read -p "Do you want to overwrite? [y/n] " yesno
	case $yesno in
	    y* | Y* )
		break
		;;
	    n* | N* | q )
		exit 1
		;;
	    *)
		;;
	esac
    done
}

function print_help {
	echo -e "Usage: $0 -q [l|m|n|h|320|850|1400|2400] -m -s $svtplay_url/..."
	echo -e " -q\tquality of the stream"
	echo -e " -p\tplay output"
	echo -e " -s\tfetch subtitles"
	echo -e " -d\Debug, echos the cmd line"
}

DEBUG=""

while getopts "q:psdh" opt; do
	case $opt in
	q)
		set_bitrate $OPTARG
		;;
	p)
		play=1
		;;
	s)
		subtitles=1
		;;
	d)
		DEBUG="echo"
		;;
	h)
		print_help
		exit 0
		;;
	\?)
		echo "invalid option: -$OPTARG" >&2
		exit 1
		;;
	esac
done

pageUrl=${!#}
if [ -z "$pageUrl" ] || [ "$pageUrl" == $0 ]; then
	print_help
	exit 1
fi

if [[ ! "$pageUrl" =~ $svtplay_url ]]; then
	echo "Bad URL. Not SVT Play?" >&2
	exit 1
fi

HTML=`curl -s "$pageUrl?type=embed"`
JSON=`curl -s "$pageUrl?output=json"`
swfUrl="$svtplay_url"`echo $HTML | $SED -n 's/^.*<param name="movie" value="\([^"]\+\)\".*/\1/p'`
tcUrls=$(get_tcUrls "$JSON" "$BITRATE")
if [ -z "$tcUrls" ]; then
	echo "ERROR: No rtmp streams found. No clip in that quality?
Please visit http://svtget.se/ for updates and information. If the website's down, use a search engine to find copies." >&2
	exit 1
fi

pick_tcUrl $tcUrls

extension="${tcUrl##*.}"
programName="$(echo $JSON | $SED -n 's/.*"folderStructure":"\([^\.]\+\).[^"]\+".*}/\1/p')"
episodName="$(echo $JSON | $SED -n 's/.*,"title":"\([^"]\+\)".*/\1/p' | $SED 's/-\+$//')"

filename="${programName}-${episodName}.${extension}"

if [ "1" != "$play" ] && [ "1" == "$subtitles" ]; then
	subUrl=$(get_sub "$JSON")
	if [ -z "$subUrl" ]; then
		echo "No subtitle found."
		subtitles="n"
	else
		sub_filename="${programName}-${episodName}.srt"
	fi
else
	subUrl=""
fi

if [ "1" != "$play" ] && [ -e "$filename" ]; then
    askOverwrite $filename
fi

if [ "1" != "$play" ]; then
	if [ "1" == "$subtitles" ]; then
		$DEBUG curl "$subUrl" -o "$sub_filename"
	fi
	if [ "$extension" == "mp4" ]; then
		CMD="rtmpdump -r ""$tcUrl"" -W ""$swfUrl"" -o ""$filename"
	elif [ $extension == "flv" ]; then
		CMD="curl ""$tcUrl"" -o ""$filename"
	fi
else
	for i in $PLAYERS; do
		mediaplayer=`which "$i"`
		if [ -n "$mediaplayer" ]; then
			break;
		fi
	done
	if [ -z "$mediaplayer" ]; then
		echo "No media player found (tried: $PLAYERS)"
	fi
	
	if [ $extension == "mp4" ]; then
		CMD="rtmpdump -r ""$tcUrl"" -W ""$swfUrl"" -o - | ""$mediaplayer"" - ""$subUrl"" &>/dev/null"
	elif [ $extension == "flv" ]; then
		CMD="$mediaplayer"" ""$tcUrl"" ""$subUrl"" &>/dev/null"
	fi
fi

eval $DEBUG $CMD
